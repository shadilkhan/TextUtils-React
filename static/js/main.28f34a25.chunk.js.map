{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","htmlfor","textMode","TextForm","useState","text","setText","style","color","heading","onChange","event","target","value","backgroundColor","rows","newText","toUpperCase","showAlert","toLowerCase","text1","document","getElementById","select","navigator","clipboard","writeText","split","join","length","Alert","alert","role","word","lower","charAt","slice","capitalize","msg","App","settextMode","setMode","setAlert","message","setTimeout","aboutText","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.28f34a25.chunk.js","sourcesContent":["import React from 'react'\r\n// import { a } from 'react-router-dom';\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        \r\n            <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode\r\n            }`}>\r\n  <div className=\"container-fluid\">\r\n    <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a>\r\n        </li>\r\n        {/* <li className=\"nav-item\">\r\n          <Link className=\"nav-a\" to=\"/\">{props.aboutText}</Link>\r\n        </li> */}\r\n        </ul>\r\n      {/* <form className=\"d-flex\">\r\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n        <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n      </form> */}\r\n      <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n        <input onClick={props.toggleMode} className=\"form-check-input\" type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n        <label className=\"form-check-label\" htmlfor=\"flexSwitchCheckDefault\">{props.textMode}</label>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</nav>\r\n        \r\n    );\r\n}\r\n\r\n","import React,{useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    function handleUpClick(){\r\n        let newText=text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"converted to uppercase!\",\"succesfully\");\r\n    }\r\n\r\n    function handleLoClick(){\r\n        let newText=text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"converted to lowercase!\",\"succesfully\");\r\n    }\r\n\r\n    function handleCopyClick(){\r\n        let text1=document.getElementById(\"myBox\");\r\n        text1.select();\r\n        navigator.clipboard.writeText(text1.value);\r\n        props.showAlert(\"copied to clipboard!\",\"succesfully\");\r\n    }\r\n    \r\n\r\n    function handleClearClick(){\r\n        let newText=\"\";\r\n        setText(newText);\r\n        props.showAlert(\"clear all!\",\"succesfully\");\r\n    }\r\n    function handleExtraSpacesClick(){\r\n        let newText=text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\"remove extraspaces!\",\"succesfully\");\r\n    }\r\n\r\n    function handleOnChange(event){\r\n        setText(event.target.value);\r\n    }\r\n    const[text,setText]=useState(\"Enter your text here\");\r\n    \r\n    return (\r\n        <> \r\n            <div className=\"container my-3\" style={{\r\n                color:props.mode==='dark'?'white':'black'\r\n            }} >\r\n            <h2>{props.heading}</h2>\r\n            <textarea className=\"form-control\" onChange={handleOnChange} style={{\r\n                backgroundColor:props.mode==='dark'?'grey':'white',color:props.mode==='dark'?'white':'black'\r\n            }} value={text} id=\"myBox\" rows=\"8\"></textarea>\r\n            <button className=\"btn btn-primary my-3\" onClick={handleUpClick}>Convert To UpperCase</button>\r\n            <button className=\"btn btn-primary my-3 mx-4\" onClick={handleLoClick}>Convert To LowerCase</button>\r\n            <button className=\"btn btn-primary my-3 mx-2\" onClick={handleClearClick}>Clear Text</button>\r\n            <button className=\"btn btn-primary my-3 mx-2\" onClick={handleCopyClick}>Copy Text</button>\r\n            <button className=\"btn btn-primary my-3 mx-2\" onClick={handleExtraSpacesClick}>Remove Extra Spaces</button>\r\n            \r\n            \r\n            </div>\r\n            <div className=\"container my-3\" style={{\r\n                color:props.mode==='dark'?'white':'black'\r\n            }} >\r\n            <h2>Your Text Summary</h2>\r\n            <p>{text.split(\" \").length}  <span>WORDS</span> and {text.length}  CHARACTER and {text.split(\" \").length-1}  SPACES</p>\r\n            <p>{0.008 * text.split(\" \").length} Minutes To Read Above </p>\r\n            <h3>Preview</h3>\r\n            <p> {text.length>0?text:\"Enter something above to preview it\"} </p>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    function capitalize(word){\r\n        const lower=word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n\r\n    }\r\n    return (\r\n        props.alert &&<div className=\"alert alert-warning alert-dismissible fade show\" role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)}</strong>,{props.alert.msg}\r\n        </div>\r\n    )\r\n}\r\n","\nimport './App.css';\n// import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React,{useState} from 'react'\nimport Alert from './components/Alert';\n// import About from \"./components/About\";\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n// } from \"react-router-dom\";\n\n\nfunction App() {\n  const [textMode, settextMode] = useState(\"Enable DarkMode\");\n  const [mode,setMode]=useState(\"light\");\n  const [alert, setAlert] = useState(null);\n\n   function showAlert(message,type){\n     setAlert({\n       msg:message,\n       type:type\n     })\n     setTimeout(() => {\n       setAlert(null);\n     }, 2000);\n   }\n\n  function toggleMode(){\n    if(mode===\"light\"){\n      setMode(\"dark\");\n      settextMode(\"Disable DarkMode\");\n      document.body.style.backgroundColor=\"#1c1a48\";\n      showAlert(\"You Enabled DarkMode\",\"Succesfully\");\n      document.title=\"TextUtils-DarkMode\";\n      // setInterval(() => {\n      //   document.title=\"TextUtils is Amazing Mode\";\n      // }, 2000);\n      // setInterval(() => {\n      //   document.title=\"Install TextUtils Now\";\n      // }, 1500);\n    }\n    else{\n      setMode(\"light\");\n      settextMode(\"Enable DarkMode\");\n      document.body.style.backgroundColor=\"white\";\n      showAlert(\"You Disable DarkMode\",\"Succesfully\");\n      document.title=\"TextUtils-LightMode\";\n    }\n  }\n  return (<>\n  {/* <Router> */}\n    <Navbar title=\"TextUtils\" aboutText=\"About Us\" mode={mode} toggleMode={toggleMode} textMode={textMode}/>\n    <Alert alert={alert}/>\n    {/* <Switch>\n          <Route exact path=\"/about\">\n            <About />\n          </Route>\n          <Route exact path=\"/\"> */}\n          <TextForm heading=\"Enter the text to analyze below:\" mode={mode} showAlert={showAlert}/>\n          {/* </Route>\n        </Switch>\n        </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}